#!/bin/bash
#PBS -l nodes=2:ppn=2
#PBS -l walltime=00:02:00
#PBS -N cache_info
#PBS -t 1-5
cd $PBS_O_WORKDIR

# Load required modules
ml icc
ml openmpi

mkdir -p ./output

node_list=$(sort -u $PBS_NODEFILE)

# Loop over all nodes in the PBS node file
for node in $node_list; do
    # Get the CPU cache size for each level of cache
    L1_cache_size=$(ssh $node "lscpu | grep 'L1d cache' | awk '{print \$3}'")
    L2_cache_size=$(ssh $node "lscpu | grep 'L2 cache' | awk '{print \$3}'")
    L3_cache_size=$(ssh $node "lscpu | grep 'L3 cache' | awk '{print \$3}'")
    # Save the CPU cache sizes to a file for the current node
    echo "Node: $node" >>./output/cache_${PBS_ARRAYID}.txt
    echo "L1 cache size: $L1_cache_size" >>./output/cache_${PBS_ARRAYID}.txt
    echo "L2 cache size: $L2_cache_size" >>./output/cache_${PBS_ARRAYID}.txt
    echo "L3 cache size: $L3_cache_size" >>./output/cache_${PBS_ARRAYID}.txt
done

# Run the MPI program
mpiexec -np 4 -hostfile $PBS_NODEFILE ./mpi_hello_world >./output/mpi_${PBS_ARRAYID}.txt

wait

#!/bin/bash

# Create an array to store unique nodes and their cache sizes
declare -A nodes

# Iterate through all files named cache_*.txt in the ./output directory
for file in ./output/cache_*.txt; do
    # Iterate through each line of the file
    while read -r line; do
        # If the line starts with "Node:", store the node name
        [[ "$line" == Node:* ]] && node=${line#Node: } && nodes[$node]="L1: , L2: , L3: "
        # If the line starts with "L1 cache size:", store the L1 cache size for the current node
        [[ "$line" == L1* ]] && nodes[$node]=${nodes[$node]/L1: /L1: ${line#L1 cache size: }}
        # If the line starts with "L2 cache size:", store the L2 cache size for the current node
        [[ "$line" == L2* ]] && nodes[$node]=${nodes[$node]/L2: /L2: ${line#L2 cache size: }}
        # If the line starts with "L3 cache size:", store the L3 cache size for the current node
        [[ "$line" == L3* ]] && nodes[$node]=${nodes[$node]/L3: /L3: ${line#L3 cache size: }}
    done <"$file"
done

# Write the unique nodes and their cache sizes to a file named cache_sizes.txt
{
    echo "Cache sizes for unique nodes:"
    for node in "${!nodes[@]}"; do
        echo "Node: $node"
        echo "${nodes[$node]}"
    done
} >./output/cache_sizes.txt
