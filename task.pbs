#!/bin/bash
#PBS -l nodes=2:ppn=2
#PBS -l walltime=00:02:00
#PBS -N cache_info
#PBS -t 1-5
cd $PBS_O_WORKDIR

# Load required modules
ml icc
ml openmpi

mkdir -p ./output

node_list=$(sort -u $PBS_NODEFILE)

# Loop over all nodes in the PBS node file
for node in $node_list; do
    # Get the CPU cache size for each level of cache
    L1_cache_size=$(ssh $node "lscpu | grep 'L1d cache' | awk '{print \$3}'")
    L2_cache_size=$(ssh $node "lscpu | grep 'L2 cache' | awk '{print \$3}'")
    L3_cache_size=$(ssh $node "lscpu | grep 'L3 cache' | awk '{print \$3}'")
    # Save the CPU cache sizes to a file for the current node
    echo "Node: $node" >>./output/cache_${PBS_ARRAYID}.txt
    echo "L1 cache size: $L1_cache_size" >>./output/cache_${PBS_ARRAYID}.txt
    echo "L2 cache size: $L2_cache_size" >>./output/cache_${PBS_ARRAYID}.txt
    echo "L3 cache size: $L3_cache_size" >>./output/cache_${PBS_ARRAYID}.txt
done

# Run the MPI program
mpiexec -np 4 -hostfile $PBS_NODEFILE ./mpi_hello_world >./output/mpi_${PBS_ARRAYID}.txt

# Wait for all tasks to complete
wait

# Create a temporary file to store the cache and MPI information
tmpfile=$(mktemp)

# Process the cache and MPI information from all tasks
for i in {1..5}; do
    # Get the cache information
    cache_file="cache_${i}.txt"
    node=$(grep Node $cache_file | awk '{print $2}')
    l1_cache_size=$(grep "L1 cache size" $cache_file | awk '{print $4}')
    l2_cache_size=$(grep "L2 cache size" $cache_file | awk '{print $4}')
    l3_cache_size=$(grep "L3 cache size" $cache_file | awk '{print $4}')
    # Get the MPI information
    mpi_file="mpi_${i}.txt"
    num_processes=$(grep "Hello world" $mpi_file | wc -l)
    # Append the information to the temporary file
    echo "$node,$l1_cache_size,$l2_cache_size,$l3_cache_size,$num_processes" >>$tmpfile
done

# Sort and aggregate the information by node
cat $tmpfile | sort | awk -F',' '{arr[$1] += $5; l1[$1] = $2; l2[$1] = $3; l3[$1] = $4} END {for (i in arr) {print i","l1[i]","l2[i]","l3[i]","arr[i]}}' >statistics.txt

# Remove the temporary file
rm $tmpfile
